/*
 * HelloSign API
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hellosign.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.hellosign.openapi.model.SubEditorOptions;
import org.hellosign.openapi.model.SubMergeField;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.hellosign.openapi.JSON;


import org.hellosign.openapi.ApiException;
/**
 * EmbeddedEditUrlRequest
 */
@JsonPropertyOrder({
    EmbeddedEditUrlRequest.JSON_PROPERTY_ALLOW_EDIT_CCS,
    EmbeddedEditUrlRequest.JSON_PROPERTY_CC_ROLES,
    EmbeddedEditUrlRequest.JSON_PROPERTY_EDITOR_OPTIONS,
    EmbeddedEditUrlRequest.JSON_PROPERTY_FORCE_SIGNER_ROLES,
    EmbeddedEditUrlRequest.JSON_PROPERTY_FORCE_SUBJECT_MESSAGE,
    EmbeddedEditUrlRequest.JSON_PROPERTY_MERGE_FIELDS,
    EmbeddedEditUrlRequest.JSON_PROPERTY_PREVIEW_ONLY,
    EmbeddedEditUrlRequest.JSON_PROPERTY_SHOW_PREVIEW,
    EmbeddedEditUrlRequest.JSON_PROPERTY_SKIP_SIGNER_ROLES,
    EmbeddedEditUrlRequest.JSON_PROPERTY_SKIP_SUBJECT_MESSAGE,
    EmbeddedEditUrlRequest.JSON_PROPERTY_TEST_MODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EmbeddedEditUrlRequest {
  public static final String JSON_PROPERTY_ALLOW_EDIT_CCS = "allow_edit_ccs";
  private Boolean allowEditCcs = false;

  public static final String JSON_PROPERTY_CC_ROLES = "cc_roles";
  private List<String> ccRoles = null;

  public static final String JSON_PROPERTY_EDITOR_OPTIONS = "editor_options";
  private SubEditorOptions editorOptions;

  public static final String JSON_PROPERTY_FORCE_SIGNER_ROLES = "force_signer_roles";
  private Boolean forceSignerRoles = false;

  public static final String JSON_PROPERTY_FORCE_SUBJECT_MESSAGE = "force_subject_message";
  private Boolean forceSubjectMessage = false;

  public static final String JSON_PROPERTY_MERGE_FIELDS = "merge_fields";
  private List<SubMergeField> mergeFields = null;

  public static final String JSON_PROPERTY_PREVIEW_ONLY = "preview_only";
  private Boolean previewOnly = false;

  public static final String JSON_PROPERTY_SHOW_PREVIEW = "show_preview";
  private Boolean showPreview = false;

  public static final String JSON_PROPERTY_SKIP_SIGNER_ROLES = "skip_signer_roles";
  private Boolean skipSignerRoles = false;

  public static final String JSON_PROPERTY_SKIP_SUBJECT_MESSAGE = "skip_subject_message";
  private Boolean skipSubjectMessage = false;

  public static final String JSON_PROPERTY_TEST_MODE = "test_mode";
  private Boolean testMode = false;

  public EmbeddedEditUrlRequest() { 
  }

  public EmbeddedEditUrlRequest allowEditCcs(Boolean allowEditCcs) {
    this.allowEditCcs = allowEditCcs;
    return this;
  }

   /**
   * This allows the requester to enable/disable to add or change CC roles when editing the template.
   * @return allowEditCcs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This allows the requester to enable/disable to add or change CC roles when editing the template.")
  @JsonProperty(JSON_PROPERTY_ALLOW_EDIT_CCS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowEditCcs() {
    return allowEditCcs;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_EDIT_CCS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowEditCcs(Boolean allowEditCcs) {
    this.allowEditCcs = allowEditCcs;
  }


  public EmbeddedEditUrlRequest ccRoles(List<String> ccRoles) {
    this.ccRoles = ccRoles;
    return this;
  }

  public EmbeddedEditUrlRequest addCcRolesItem(String ccRolesItem) {
    if (this.ccRoles == null) {
      this.ccRoles = new ArrayList<>();
    }
    this.ccRoles.add(ccRolesItem);
    return this;
  }

   /**
   * The CC roles that must be assigned when using the template to send a signature request. To remove all CC roles, pass in a single role with no name. For use in a POST request.
   * @return ccRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The CC roles that must be assigned when using the template to send a signature request. To remove all CC roles, pass in a single role with no name. For use in a POST request.")
  @JsonProperty(JSON_PROPERTY_CC_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCcRoles() {
    return ccRoles;
  }


  @JsonProperty(JSON_PROPERTY_CC_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCcRoles(List<String> ccRoles) {
    this.ccRoles = ccRoles;
  }


  public EmbeddedEditUrlRequest editorOptions(SubEditorOptions editorOptions) {
    this.editorOptions = editorOptions;
    return this;
  }

   /**
   * Get editorOptions
   * @return editorOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EDITOR_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SubEditorOptions getEditorOptions() {
    return editorOptions;
  }


  @JsonProperty(JSON_PROPERTY_EDITOR_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEditorOptions(SubEditorOptions editorOptions) {
    this.editorOptions = editorOptions;
  }


  public EmbeddedEditUrlRequest forceSignerRoles(Boolean forceSignerRoles) {
    this.forceSignerRoles = forceSignerRoles;
    return this;
  }

   /**
   * Provide users the ability to review/edit the template signer roles.
   * @return forceSignerRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide users the ability to review/edit the template signer roles.")
  @JsonProperty(JSON_PROPERTY_FORCE_SIGNER_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForceSignerRoles() {
    return forceSignerRoles;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_SIGNER_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForceSignerRoles(Boolean forceSignerRoles) {
    this.forceSignerRoles = forceSignerRoles;
  }


  public EmbeddedEditUrlRequest forceSubjectMessage(Boolean forceSubjectMessage) {
    this.forceSubjectMessage = forceSubjectMessage;
    return this;
  }

   /**
   * Provide users the ability to review/edit the template subject and message.
   * @return forceSubjectMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide users the ability to review/edit the template subject and message.")
  @JsonProperty(JSON_PROPERTY_FORCE_SUBJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForceSubjectMessage() {
    return forceSubjectMessage;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_SUBJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForceSubjectMessage(Boolean forceSubjectMessage) {
    this.forceSubjectMessage = forceSubjectMessage;
  }


  public EmbeddedEditUrlRequest mergeFields(List<SubMergeField> mergeFields) {
    this.mergeFields = mergeFields;
    return this;
  }

  public EmbeddedEditUrlRequest addMergeFieldsItem(SubMergeField mergeFieldsItem) {
    if (this.mergeFields == null) {
      this.mergeFields = new ArrayList<>();
    }
    this.mergeFields.add(mergeFieldsItem);
    return this;
  }

   /**
   * Get mergeFields
   * @return mergeFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MERGE_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SubMergeField> getMergeFields() {
    return mergeFields;
  }


  @JsonProperty(JSON_PROPERTY_MERGE_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMergeFields(List<SubMergeField> mergeFields) {
    this.mergeFields = mergeFields;
  }


  public EmbeddedEditUrlRequest previewOnly(Boolean previewOnly) {
    this.previewOnly = previewOnly;
    return this;
  }

   /**
   * This allows the requester to enable the preview experience experience.  **Note**: This parameter overwrites &#x60;show_preview&#x3D;true&#x60; (if set).
   * @return previewOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This allows the requester to enable the preview experience experience.  **Note**: This parameter overwrites `show_preview=true` (if set).")
  @JsonProperty(JSON_PROPERTY_PREVIEW_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPreviewOnly() {
    return previewOnly;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviewOnly(Boolean previewOnly) {
    this.previewOnly = previewOnly;
  }


  public EmbeddedEditUrlRequest showPreview(Boolean showPreview) {
    this.showPreview = showPreview;
    return this;
  }

   /**
   * This allows the requester to enable the editor/preview experience.
   * @return showPreview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This allows the requester to enable the editor/preview experience.")
  @JsonProperty(JSON_PROPERTY_SHOW_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowPreview() {
    return showPreview;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShowPreview(Boolean showPreview) {
    this.showPreview = showPreview;
  }


  public EmbeddedEditUrlRequest skipSignerRoles(Boolean skipSignerRoles) {
    this.skipSignerRoles = skipSignerRoles;
    return this;
  }

   /**
   * If signer roles are already provided, the user will not be prompted to edit them.  **Note**: this parameter will be deprecated in May 2020 and skipping the signer roles screen will become the default behavior. To enforce showing the signer roles screen, use the &#x60;force_signer_roles&#x60; parameter.
   * @return skipSignerRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If signer roles are already provided, the user will not be prompted to edit them.  **Note**: this parameter will be deprecated in May 2020 and skipping the signer roles screen will become the default behavior. To enforce showing the signer roles screen, use the `force_signer_roles` parameter.")
  @JsonProperty(JSON_PROPERTY_SKIP_SIGNER_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipSignerRoles() {
    return skipSignerRoles;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_SIGNER_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipSignerRoles(Boolean skipSignerRoles) {
    this.skipSignerRoles = skipSignerRoles;
  }


  public EmbeddedEditUrlRequest skipSubjectMessage(Boolean skipSubjectMessage) {
    this.skipSubjectMessage = skipSubjectMessage;
    return this;
  }

   /**
   * If the subject and message has already been provided, the user will not be prompted to edit them.  **Note**: this parameter will be deprecated in May 2020 and skipping the subject message screen will become the default behavior. To enforce showing the subject message screen, use the &#x60;force_subject_message&#x60; parameter.
   * @return skipSubjectMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the subject and message has already been provided, the user will not be prompted to edit them.  **Note**: this parameter will be deprecated in May 2020 and skipping the subject message screen will become the default behavior. To enforce showing the subject message screen, use the `force_subject_message` parameter.")
  @JsonProperty(JSON_PROPERTY_SKIP_SUBJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipSubjectMessage() {
    return skipSubjectMessage;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_SUBJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipSubjectMessage(Boolean skipSubjectMessage) {
    this.skipSubjectMessage = skipSubjectMessage;
  }


  public EmbeddedEditUrlRequest testMode(Boolean testMode) {
    this.testMode = testMode;
    return this;
  }

   /**
   * Whether this is a test, locked templates will only be available for editing if this is set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.
   * @return testMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this is a test, locked templates will only be available for editing if this is set to `true`. Defaults to `false`.")
  @JsonProperty(JSON_PROPERTY_TEST_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTestMode() {
    return testMode;
  }


  @JsonProperty(JSON_PROPERTY_TEST_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestMode(Boolean testMode) {
    this.testMode = testMode;
  }


  /**
   * Return true if this EmbeddedEditUrlRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddedEditUrlRequest embeddedEditUrlRequest = (EmbeddedEditUrlRequest) o;
    return Objects.equals(this.allowEditCcs, embeddedEditUrlRequest.allowEditCcs) &&
        Objects.equals(this.ccRoles, embeddedEditUrlRequest.ccRoles) &&
        Objects.equals(this.editorOptions, embeddedEditUrlRequest.editorOptions) &&
        Objects.equals(this.forceSignerRoles, embeddedEditUrlRequest.forceSignerRoles) &&
        Objects.equals(this.forceSubjectMessage, embeddedEditUrlRequest.forceSubjectMessage) &&
        Objects.equals(this.mergeFields, embeddedEditUrlRequest.mergeFields) &&
        Objects.equals(this.previewOnly, embeddedEditUrlRequest.previewOnly) &&
        Objects.equals(this.showPreview, embeddedEditUrlRequest.showPreview) &&
        Objects.equals(this.skipSignerRoles, embeddedEditUrlRequest.skipSignerRoles) &&
        Objects.equals(this.skipSubjectMessage, embeddedEditUrlRequest.skipSubjectMessage) &&
        Objects.equals(this.testMode, embeddedEditUrlRequest.testMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowEditCcs, ccRoles, editorOptions, forceSignerRoles, forceSubjectMessage, mergeFields, previewOnly, showPreview, skipSignerRoles, skipSubjectMessage, testMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddedEditUrlRequest {\n");
    sb.append("    allowEditCcs: ").append(toIndentedString(allowEditCcs)).append("\n");
    sb.append("    ccRoles: ").append(toIndentedString(ccRoles)).append("\n");
    sb.append("    editorOptions: ").append(toIndentedString(editorOptions)).append("\n");
    sb.append("    forceSignerRoles: ").append(toIndentedString(forceSignerRoles)).append("\n");
    sb.append("    forceSubjectMessage: ").append(toIndentedString(forceSubjectMessage)).append("\n");
    sb.append("    mergeFields: ").append(toIndentedString(mergeFields)).append("\n");
    sb.append("    previewOnly: ").append(toIndentedString(previewOnly)).append("\n");
    sb.append("    showPreview: ").append(toIndentedString(showPreview)).append("\n");
    sb.append("    skipSignerRoles: ").append(toIndentedString(skipSignerRoles)).append("\n");
    sb.append("    skipSubjectMessage: ").append(toIndentedString(skipSubjectMessage)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (allowEditCcs != null) {
        if (isFileTypeOrListOfFiles(allowEditCcs)) {
            fileTypeFound = true;
        }

        if (allowEditCcs.getClass().equals(java.io.File.class) ||
            allowEditCcs.getClass().equals(Integer.class) ||
            allowEditCcs.getClass().equals(String.class) ) {
            map.put("allow_edit_ccs", allowEditCcs);
        } else if (isListOfFile(allowEditCcs)) {
            for(int i = 0; i< getListSize(allowEditCcs); i++) {
                map.put("allow_edit_ccs[" + i + "]", getFromList(allowEditCcs, i));
            }
        }
        else {
            map.put("allow_edit_ccs", JSON.getDefault().getMapper().writeValueAsString(allowEditCcs));
        }
    }
    if (ccRoles != null) {
        if (isFileTypeOrListOfFiles(ccRoles)) {
            fileTypeFound = true;
        }

        if (ccRoles.getClass().equals(java.io.File.class) ||
            ccRoles.getClass().equals(Integer.class) ||
            ccRoles.getClass().equals(String.class) ) {
            map.put("cc_roles", ccRoles);
        } else if (isListOfFile(ccRoles)) {
            for(int i = 0; i< getListSize(ccRoles); i++) {
                map.put("cc_roles[" + i + "]", getFromList(ccRoles, i));
            }
        }
        else {
            map.put("cc_roles", JSON.getDefault().getMapper().writeValueAsString(ccRoles));
        }
    }
    if (editorOptions != null) {
        if (isFileTypeOrListOfFiles(editorOptions)) {
            fileTypeFound = true;
        }

        if (editorOptions.getClass().equals(java.io.File.class) ||
            editorOptions.getClass().equals(Integer.class) ||
            editorOptions.getClass().equals(String.class) ) {
            map.put("editor_options", editorOptions);
        } else if (isListOfFile(editorOptions)) {
            for(int i = 0; i< getListSize(editorOptions); i++) {
                map.put("editor_options[" + i + "]", getFromList(editorOptions, i));
            }
        }
        else {
            map.put("editor_options", JSON.getDefault().getMapper().writeValueAsString(editorOptions));
        }
    }
    if (forceSignerRoles != null) {
        if (isFileTypeOrListOfFiles(forceSignerRoles)) {
            fileTypeFound = true;
        }

        if (forceSignerRoles.getClass().equals(java.io.File.class) ||
            forceSignerRoles.getClass().equals(Integer.class) ||
            forceSignerRoles.getClass().equals(String.class) ) {
            map.put("force_signer_roles", forceSignerRoles);
        } else if (isListOfFile(forceSignerRoles)) {
            for(int i = 0; i< getListSize(forceSignerRoles); i++) {
                map.put("force_signer_roles[" + i + "]", getFromList(forceSignerRoles, i));
            }
        }
        else {
            map.put("force_signer_roles", JSON.getDefault().getMapper().writeValueAsString(forceSignerRoles));
        }
    }
    if (forceSubjectMessage != null) {
        if (isFileTypeOrListOfFiles(forceSubjectMessage)) {
            fileTypeFound = true;
        }

        if (forceSubjectMessage.getClass().equals(java.io.File.class) ||
            forceSubjectMessage.getClass().equals(Integer.class) ||
            forceSubjectMessage.getClass().equals(String.class) ) {
            map.put("force_subject_message", forceSubjectMessage);
        } else if (isListOfFile(forceSubjectMessage)) {
            for(int i = 0; i< getListSize(forceSubjectMessage); i++) {
                map.put("force_subject_message[" + i + "]", getFromList(forceSubjectMessage, i));
            }
        }
        else {
            map.put("force_subject_message", JSON.getDefault().getMapper().writeValueAsString(forceSubjectMessage));
        }
    }
    if (mergeFields != null) {
        if (isFileTypeOrListOfFiles(mergeFields)) {
            fileTypeFound = true;
        }

        if (mergeFields.getClass().equals(java.io.File.class) ||
            mergeFields.getClass().equals(Integer.class) ||
            mergeFields.getClass().equals(String.class) ) {
            map.put("merge_fields", mergeFields);
        } else if (isListOfFile(mergeFields)) {
            for(int i = 0; i< getListSize(mergeFields); i++) {
                map.put("merge_fields[" + i + "]", getFromList(mergeFields, i));
            }
        }
        else {
            map.put("merge_fields", JSON.getDefault().getMapper().writeValueAsString(mergeFields));
        }
    }
    if (previewOnly != null) {
        if (isFileTypeOrListOfFiles(previewOnly)) {
            fileTypeFound = true;
        }

        if (previewOnly.getClass().equals(java.io.File.class) ||
            previewOnly.getClass().equals(Integer.class) ||
            previewOnly.getClass().equals(String.class) ) {
            map.put("preview_only", previewOnly);
        } else if (isListOfFile(previewOnly)) {
            for(int i = 0; i< getListSize(previewOnly); i++) {
                map.put("preview_only[" + i + "]", getFromList(previewOnly, i));
            }
        }
        else {
            map.put("preview_only", JSON.getDefault().getMapper().writeValueAsString(previewOnly));
        }
    }
    if (showPreview != null) {
        if (isFileTypeOrListOfFiles(showPreview)) {
            fileTypeFound = true;
        }

        if (showPreview.getClass().equals(java.io.File.class) ||
            showPreview.getClass().equals(Integer.class) ||
            showPreview.getClass().equals(String.class) ) {
            map.put("show_preview", showPreview);
        } else if (isListOfFile(showPreview)) {
            for(int i = 0; i< getListSize(showPreview); i++) {
                map.put("show_preview[" + i + "]", getFromList(showPreview, i));
            }
        }
        else {
            map.put("show_preview", JSON.getDefault().getMapper().writeValueAsString(showPreview));
        }
    }
    if (skipSignerRoles != null) {
        if (isFileTypeOrListOfFiles(skipSignerRoles)) {
            fileTypeFound = true;
        }

        if (skipSignerRoles.getClass().equals(java.io.File.class) ||
            skipSignerRoles.getClass().equals(Integer.class) ||
            skipSignerRoles.getClass().equals(String.class) ) {
            map.put("skip_signer_roles", skipSignerRoles);
        } else if (isListOfFile(skipSignerRoles)) {
            for(int i = 0; i< getListSize(skipSignerRoles); i++) {
                map.put("skip_signer_roles[" + i + "]", getFromList(skipSignerRoles, i));
            }
        }
        else {
            map.put("skip_signer_roles", JSON.getDefault().getMapper().writeValueAsString(skipSignerRoles));
        }
    }
    if (skipSubjectMessage != null) {
        if (isFileTypeOrListOfFiles(skipSubjectMessage)) {
            fileTypeFound = true;
        }

        if (skipSubjectMessage.getClass().equals(java.io.File.class) ||
            skipSubjectMessage.getClass().equals(Integer.class) ||
            skipSubjectMessage.getClass().equals(String.class) ) {
            map.put("skip_subject_message", skipSubjectMessage);
        } else if (isListOfFile(skipSubjectMessage)) {
            for(int i = 0; i< getListSize(skipSubjectMessage); i++) {
                map.put("skip_subject_message[" + i + "]", getFromList(skipSubjectMessage, i));
            }
        }
        else {
            map.put("skip_subject_message", JSON.getDefault().getMapper().writeValueAsString(skipSubjectMessage));
        }
    }
    if (testMode != null) {
        if (isFileTypeOrListOfFiles(testMode)) {
            fileTypeFound = true;
        }

        if (testMode.getClass().equals(java.io.File.class) ||
            testMode.getClass().equals(Integer.class) ||
            testMode.getClass().equals(String.class) ) {
            map.put("test_mode", testMode);
        } else if (isListOfFile(testMode)) {
            for(int i = 0; i< getListSize(testMode); i++) {
                map.put("test_mode[" + i + "]", getFromList(testMode, i));
            }
        }
        else {
            map.put("test_mode", JSON.getDefault().getMapper().writeValueAsString(testMode));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }

    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

